<?php
/**
 * Copyright (c) 2017 LKK/lianq.net All rights reserved
 * User: kakuilan@163.com
 * Date: 2017/8/17
 * Time: 22:51
 * Desc: -
 */


namespace Kengine\Server;

use Phalcon\Mvc\Application;
use Lkk\LkkService;
use Lkk\Phalwoo\Phalcon\Di as PwDi;
use Lkk\Phalwoo\Phalcon\Http\Request as PwRequest;
use Lkk\Phalwoo\Phalcon\Http\Response as PwResponse;
use Lkk\Phalwoo\Phalcon\Http\Response\Cookies as PwCookies;
use Lkk\Phalwoo\Phalcon\Session\Adapter\Redis as PwSession;
use Lkk\Phalwoo\Server\Component\Client\Mysql;
use Lkk\Phalwoo\Server\Component\Log\Handler\AsyncStreamHandler;
use Lkk\Phalwoo\Server\Component\Log\SwooleLogger;
use Lkk\Phalwoo\Server\Component\Pool\PoolManager;
use Lkk\Phalwoo\Server\Concurrent\Promise;
use Lkk\Phalwoo\Server\DenyUserAgent;
use Lkk\Phalwoo\Server\SwooleServer;
use Kengine\LkkCmponent;
use Kengine\LkkCookies;


class LkkServer extends SwooleServer {

    public function __construct(array $vars = []) {
        parent::__construct($vars);

    }


    /**
     * 获取实例[子类必须重写]
     * @param array $vars
     * @return mixed
     */
    public static function instance(array $vars = []) {
        if(is_null(parent::$instance) || !is_object(parent::$instance)) {
            parent::$instance = new self($vars);
        }

        return parent::$instance;
    }


    /**
     * 销毁实例化对象
     */
    public static function destroy() {
        parent::$instance = null;
        self::$_instance = null;
    }


    public function initServer() {
        //所有全局变量应在swoole事件绑定前设置好
        //否则swoole事件回调时进程间不共享变量
        //TODO 添加自定义的全局变量

        //TODO 读取单独的配置
        $this->setPoolManager(getConf('pool')->toArray());

        parent::initServer();

        $logger = self::getLogger();
        $logger->getDefaultHandler()->bindSwooleCloseEvent();

        return $this;
    }


    public function startServer() {
        //TODO 自定义逻辑

        parent::startServer();

        return $this;
    }


    public static function onSwooleStart($serv) {
        parent::onSwooleStart($serv); // TODO: Change the autogenerated stub

    }


    public static function onSwooleWorkerStart($serv, $workerId) {
        self::getPoolManager()->initAll();

        parent::onSwooleWorkerStart($serv, $workerId);

    }


    public static function onSwooleRequest($request, $response) {
        $sendRes = parent::onSwooleRequest($request, $response);
        if(!$sendRes) return $sendRes;

        //协程
        Promise::co(function() use ($request, $response){
            yield LkkServer::doSwooleRequest($request, $response);
        });

        return true;
    }


    public static function doSwooleRequest($request, $response) {
        $di = new PwDi();
        $app = new Application($di);
        $di->setShared('swooleRequest', $request);
        $di->setShared('swooleResponse', $response);

        var_dump('get data', $request->get);

        //加密组件放在cookie和denAgent前面
        $crypt = LkkCmponent::crypt();
        $di->setShared('crypt', $crypt);

        //TODO 检查客户端,防止爬虫和压力测试
        $denAgent = new DenyUserAgent();
        $denAgent->setRequest($request);
        $denAgent->setDI($di);
        $denAgent->setAllowBench(true);
        $agentUuid = $denAgent->getAgentUuid();
        $di->setShared('denAgent', $denAgent);

        $chkAgen = $denAgent->checkAll();
        if(!$chkAgen) {
            return $response->end();
        }

        self::resetRequestGlobal($request);
        $requestUuid = self::makeRequestUuid($request);

        $pwRequest = new PwRequest();
        $pwRequest->setDI($di);
        $di->setShared('request', $pwRequest);

        $pwResponse = new PwResponse();
        $pwResponse->setDi($di);
        $di->setShared('response', $pwResponse);

        $cookies = new LkkCookies();
        $cookies->useEncryption(false);
        $cookies->setDI($di);
        $di->setShared('cookies', $cookies);

        $sessionConf = getConf('session')->toArray();
        $sessionConf['cookie'] = getConf('cookie')->toArray();

        //注意下面这几个方法顺序不能改
        $session = new PwSession($sessionConf);
        $session->setDI($di);
        $di->setShared('session', $session);
        $session->start();

        // URL设置
        $di->setShared('url', LkkCmponent::url());

        //crypt
        $di->setShared('crypt', LkkCmponent::crypt());

        //缓存服务
        $di->setShared('cache', LkkCmponent::siteCache());

        //数据库-主从
        //压测时会出现SQLSTATE[08004] [1040] Too many connections
        $dbMaster = LkkCmponent::SyncDbMaster($requestUuid);
        $dbSlave = LkkCmponent::SyncDbSlave($requestUuid);
        $di->setShared('dbMaster', $dbMaster);
        $di->setShared('dbSlave', $dbSlave);

        /*$asyncMysql = self::getPoolManager()->get('mysql_master')->pop();
        $sql = "INSERT INTO lkk_test (`name`,`title`) VALUE ('li4','hello') ";
        $res1 = yield $asyncMysql->begin();
        $res2 = yield $asyncMysql->execute($sql, true);
        //yield $asyncMysql->commit();
        $res3 = yield $asyncMysql->rollback();
        var_dump('sql res', $res1, $res2, $res3);*/

        $asyncMysql = self::getPoolManager()->get('mysql_master')->pop();
        $sql = "SELECT  COUNT(1) AS num  FROM `lkk_cnarea` WHERE `lkk_cnarea`.`level` = 1 ORDER BY `lkk_cnarea`.`id` ASC";
        $res2 = yield $asyncMysql->execute($sql, true);
        var_dump('sql res', $res2);





        $response->end('ok');

        $dbMaster->close();
        $dbSlave->close();
        self::afterSwooleResponse($request, $pwRequest);

        return true;
    }



    protected static function afterSwooleResponse($swooleRequest, $phalconRequest) {
        $reqUuid = $phalconRequest->getRequestUuid();
        LkkCmponent::destroyRequests($reqUuid);

        //unset($swooleRequest, $phalconRequest);
    }



    public static function onSwooleClose($serv, $fd, $fromId) {
        parent::onSwooleClose($serv, $fd, $fromId);

        //随机写日志
        if(mt_rand(0, 2)==1 || true) {
            $di = SwooleServer::getServerDi();
            $eventManager = $di->get('eventsManager');
            $eventManager->fire('SwooleServer:onSwooleClose', self::instance());
        }

    }



    public static function onSwooleWorkerStop($serv, $workerId) {
        parent::onSwooleWorkerStop($serv, $workerId);

    }


    public static function onSwooleManagerStop($serv) {
        parent::onSwooleManagerStop($serv);

    }


    public static function onSwooleShutdown($serv) {
        parent::onSwooleShutdown($serv);

    }





}