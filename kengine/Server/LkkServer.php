<?php
/**
 * Copyright (c) 2017 LKK/lianq.net All rights reserved
 * User: kakuilan@163.com
 * Date: 2017/8/17
 * Time: 22:51
 * Desc: -
 */


namespace Kengine\Server;

use Kengine\Engine;
use Kengine\LkkCmponent;
use Kengine\LkkCookies;
use Kengine\LkkModel;
use Lkk\Concurrent\Promise;
use Lkk\Helpers\CommonHelper;
use Lkk\LkkService;
use Lkk\Phalwoo\Phalcon\Debug as PwDebug;
use Lkk\Phalwoo\Phalcon\Di as PwDi;
use Lkk\Phalwoo\Phalcon\Http\Request as PwRequest;
use Lkk\Phalwoo\Phalcon\Http\Response as PwResponse;
use Lkk\Phalwoo\Phalcon\Http\Response\Cookies as PwCookies;
use Lkk\Phalwoo\Phalcon\Http\UserAgent;
use Lkk\Phalwoo\Phalcon\Mvc\Application as PwApplication;
use Lkk\Phalwoo\Phalcon\Mvc\Dispatcher as PwDispatcher;
use Lkk\Phalwoo\Phalcon\Session\Adapter\Redis as PwSession;
use Lkk\Phalwoo\Phalcon\Tag as PwTag;
use Lkk\Phalwoo\Server\Component\Client\Mysql;
use Lkk\Phalwoo\Server\Component\Client\Redis;
use Lkk\Phalwoo\Server\Component\Log\Handler\AsyncStreamHandler;
use Lkk\Phalwoo\Server\Component\Log\SwooleLogger;
use Lkk\Phalwoo\Server\Component\Pool\PoolManager;
use Lkk\Phalwoo\Server\SwooleServer;
use Apps\Services\UserService;
use Throwable;

class LkkServer extends SwooleServer {

    public function __construct(array $vars = []) {
        parent::__construct($vars);

    }


    /**
     * 获取实例[子类必须重写]
     * @param array $vars
     * @return mixed
     */
    public static function instance(array $vars = []) {
        if(is_null(parent::$instance) || !is_object(parent::$instance)) {
            parent::$instance = new self($vars);
        }

        return parent::$instance;
    }


    /**
     * 销毁实例化对象
     */
    public static function destroy() {
        parent::$instance = null;
        self::$_instance = null;
    }


    public function initServer() {
        //所有全局变量应在swoole事件绑定前设置好
        //否则swoole事件回调时进程间不共享变量
        //TODO 添加自定义的全局变量

        //TODO 读取单独的配置
        $this->setPoolManager(getConf('pool')->toArray());

        //Tag注册url服务
        PwTag::setUrlService(LkkCmponent::url());

        parent::initServer();

        $logger = self::getLogger();
        $logger->getDefaultHandler()->bindSwooleCloseEvent();

        return $this;
    }


    public function startServer() {
        //TODO 自定义逻辑

        parent::startServer();

        return $this;
    }


    public static function onSwooleStart($serv) {
        parent::onSwooleStart($serv); // TODO: Change the autogenerated stub

    }


    public static function onSwooleWorkerStart($serv, $workerId) {
        self::getPoolManager()->initAll();
        //set_error_handler("\Kengine\Server\LkkServer::setErrorHandler", E_ALL);

        parent::onSwooleWorkerStart($serv, $workerId);

    }


    public static function onSwooleRequest($request, $response) {
        $sendRes = parent::onSwooleRequest($request, $response);
        if(!$sendRes) return $sendRes;

        $shareTable = SwooleServer::getShareTable();
        $stopping = intval($shareTable->get('server', 'stopping'));
        if($stopping) {
            $response->end('server stopping');
            return false;
        }

        //协程
        Promise::co(function() use ($request, $response){
            yield LkkServer::doSwooleRequest($request, $response);
        });

        return true;
    }


    /**
     * 是否开启xhprof
     * @param bool $useRatio 使用随机率
     *
     * @return bool
     */
    public static function isXhprofEnable($useRatio=false) {
        $res = false;
        $res = self::instance()->conf['xhprof_enable'] && function_exists('xhprof_enable');

        if($useRatio) $res = $res && mt_rand(1, self::instance()->conf['xhprof_ratio']) == self::instance()->conf['xhprof_ratio'];
        return $res;
    }


    public static function doSwooleRequest($request, $response) {
        //xhprof
        if(self::isXhprofEnable()) {
            // cpu:XHPROF_FLAGS_CPU 内存:XHPROF_FLAGS_MEMORY
            // 如果两个一起：XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY
            xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);
        }

        $di = new PwDi();
        $app = new PwApplication($di);
        $di->setShared('swooleRequest', $request);
        $di->setShared('swooleResponse', $response);

        getLogger()->info('request:', [
            'header' => $request->header ?? '',
            'server' => $request->server ?? '',
            'get' => $request->get ?? '',
            'post' => $request->post ?? '',
            'cookie' => $request->cookie ?? '',
        ]);

        //加密组件放在cookie和denAgent前面
        $crypt = LkkCmponent::crypt();
        $di->setShared('crypt', $crypt);

        //检查客户端,防止爬虫和压力测试
        $loginCnf = getConf('login');
        $agentService = new UserAgent();
        $agentService->setAllowBench(true); //允许压测
        $agentService->setAgentFpName($loginCnf->agentFpName);
        $agentService->setTokenName($loginCnf->tokenName);
        $agentService->setTokenFunc(function($token){
            //TODO 校验token
            return true;
        });
        $agentService->setSwRequest($request);
        $agentService->setDI($di);
        $di->setShared('userAgent', $agentService);

        //执行验证
        $chkAgen = $agentService->validate();
        if(!$chkAgen) {
            return $response->end($agentService->error());
        }

        self::resetRequestGlobal($request);

        $pwRequest = new PwRequest();
        $pwRequest->setDI($di);
        $pwRequest->setSwooleRequest($request);
        $di->setShared('request', $pwRequest);

        $pwResponse = new PwResponse();
        $pwResponse->setDi($di);
        $pwResponse->setSwooleResponse($response);
        $di->setShared('response', $pwResponse);

        $cookies = new LkkCookies();
        $cookies->setConf(getConf('cookie')->toArray());
        $cookies->useEncryption(false);
        $cookies->setDI($di);
        $di->setShared('cookies', $cookies);

        $sessionConf = getConf('session')->toArray();
        $sessionConf['cookie'] = getConf('cookie')->toArray();

        //注意下面这几个方法顺序不能改
        $session = new PwSession($sessionConf);
        $session->setDI($di);
        $di->setShared('session', $session);
        yield $session->start();

        //session的pv检查
        $userQps = $session->getQps();
        if($userQps>9) {
            return $response->end('访问过于频繁');
        }

        //检查是否sessionID变更
        if($agentService->isSessionIdChange()) {
            //TODO
        }

        //注册各模块
        $moduleConf = getConf('modules')->toArray();
        $app->registerModules($moduleConf);

        //设置路由
        $router = Engine::setRouter();
        $di->setShared('router', $router);

        //设置dispatcher分发器
        $dispatcher = new PwDispatcher();
        $di->setShared('dispatcher', $dispatcher);

        // URL设置
        $di->setShared('url', LkkCmponent::url());

        //多模块应用的视图设置
        $eventsManager = $di->get('eventsManager');
        $eventsManager->attach('application:afterStartModule',function($event,$app,$module) use($di){
            $router = $di->get('router');
            $curModule = $router->getModuleName();

            $view = Engine::setModuleViewer($curModule, $di);
            $di->setShared('view', $view);

        });
        $app->setEventsManager($eventsManager);

        //缓存服务
        $di->setShared('cache', LkkCmponent::siteCache());

        //数据库-主从
        //压测时会出现SQLSTATE[08004] [1040] Too many connections
        $dbMaster = LkkCmponent::syncDbMaster();
        $dbSlave = LkkCmponent::syncDbSlave();
        $di->setShared('dbMaster', $dbMaster);
        $di->setShared('dbSlave', $dbSlave);

        //注册自定义服务userService
        $requestUuid = $pwRequest->getRequestUuid();
        $userService = new UserService(['requiestUuid'=>$requestUuid]);
        $userService->setDI($di);
        $di->setShared('userService', $userService);

        //注入app,以便actioin里面访问
        $di->setShared('app', $app);
        $app->setDI($di);

        //phalcon处理
        $_uri = $request->get['_url'] ?? $request->server['request_uri'];
        try {
            $resp = yield $app->handle($_uri);
            $resp = self::handleDispatcherError($resp);
        }catch (Throwable $e) {
            $resp = self::handleDispatcherError($e);
        }

        if ($resp instanceof PwResponse) {
            if($resp->hasFile()) {
                $resp->sendFile();
                yield $response->end();
            }else{
                $resp->send();
                yield $response->end($resp->getContent());
            }
        } else if (is_string($resp)) {
            yield $response->end($resp);
        } else {
            yield $response->end('none');
        }

        //设置请求用时
        $useTime = CommonHelper::getMillisecond() - ($request->server['request_time_float'] ?? $request->server['request_time']) * 1000;
        $pwRequest->setUseMillisecond($useTime);

        //xhprof日志
        if(self::isXhprofEnable(true) && ($useTime > self::instance()->conf['xhprof_milltime'])) {
            self::saveXhprofLog($di);
        }

        self::afterSwooleResponse($request, $pwRequest);
        unset($request, $response, $di, $app, $agentService, $pwRequest, $pwResponse, $cookies, $session, $dispatcher);

        yield self::logPv();

        return true;
    }


    /**
     * 保存xhprof日志
     * @param $di
     */
    public static function saveXhprofLog($di) {
        $xhprofData = xhprof_disable();
        $xhprofRuns = new \XHProfRuns_Default();

        $router = $di->get('router');
        $request = $di->get('swooleRequest');
        $module = ucfirst($router->getModuleName());
        $controller = ucfirst($router->getControllerName());
        $action = ucfirst($router->getActionName());
        $reportFile = "{$module}{$controller}{$action}{$request->server['request_time_float']}";
        $runId = $xhprofRuns->save_run($xhprofData, 'profiler', str_replace('.','T',$reportFile));
        //$xhprofUrl = "http://127.0.0.1/monitor/xhprof/xhprof_html/index.php?run=" . $runId . '&source=profiler';
    }



    /**
     * 处理分发器的错误
     * @param $e
     *
     * @return string
     */
    public static function handleDispatcherError($e) {
        if(is_object($e) && $e instanceof Throwable) {
            $resp = "Error code:[LkkServer] " . $e->getCode() . '\r\n';
            $resp .= "Error message: " . $e->getMessage() . '\r\n';
            $resp .= "Error file: " . $e->getFile() . '\r\n';
            $resp .= "Error fileline: " . $e->getLine() . '\r\n';
            $resp .= "Error trace: " . $e->getTraceAsString() . '\r\n';

            if(!SwooleServer::isOpenDebug()) {
                SwooleServer::getLogger()->error($resp);
                $resp = 'Sorry,server has error!';
            }

            $e = $resp;
        }

        return $e;
    }


    /**
     * 记录请求日志
     * @param \swoole_http_request $request
     *
     * @return bool
     */
    protected static function logRequest(\swoole_http_request $request, PwRequest $pwRequest) {
        if(SwooleServer::isOpenLoger()) {
            $useTime = $pwRequest->getUseMillisecond();
            if($useTime > self::instance()->conf['sys_log']['slow_request']) {
                self::getLogger()->info("http request execute time[http_slow_request]:{$useTime}", $request->server);
            }

            //TODO 拆成队列，整除10,批量入库
        }

        return true;
    }


    /**
     * 记录pv
     * @return int
     */
    protected static function logPv() {
        $res  = false;
        $key = self::instance()->conf['pv']['day_real_pv'];
        $redis = self::getPoolManager()->get('redis_site')->pop();
        if(is_object($redis) && ($redis instanceof Redis)) {
            $res = intval(yield $redis->incrBy($key, 1));
        }

        return $res;
    }



    protected static function afterSwooleResponse($swooleRequest, $phalconRequest) {
        self::logRequest($swooleRequest, $phalconRequest);

        $reqUuid = $phalconRequest->getRequestUuid();
        LkkCmponent::destroyRequests($reqUuid);
    }



    public static function onSwooleClose($serv, $fd, $fromId) {
        parent::onSwooleClose($serv, $fd, $fromId);

        //随机写日志
        if(mt_rand(0, 5)==1) {
            $di = SwooleServer::getServerDi();
            $eventManager = $di->get('eventsManager');
            $eventManager->fire('SwooleServer:onSwooleClose', self::instance());
        }

    }



    public static function onSwooleWorkerStop($serv, $workerId) {
        parent::onSwooleWorkerStop($serv, $workerId);

        //zend_opcache的opcache清理函数
        if(function_exists('opcache_reset')) {
            opcache_reset();
        }

    }


    public static function onSwooleManagerStop($serv) {
        parent::onSwooleManagerStop($serv);

    }


    public static function onSwooleShutdown($serv) {
        parent::onSwooleShutdown($serv);

    }


    /**
     * 当检测到其他进程正停止服务时
     */
    public static function onStopping() {
        echo "onStopping ...\r\n";

        $shareTable = SwooleServer::getShareTable();
        $shareTable->setSubItem('server', ['stopping'=>1]);

        //写日志
        $di = SwooleServer::getServerDi();
        $eventManager = $di->get('eventsManager');
        $eventManager->fire('SwooleServer:onSwooleClose', self::instance());

    }


    public static function setErrorHandler($errno, $errstr, $errfile, $errline, $errcontext) {
        $displayErrors = ini_get("display_errors");
        $displayErrors = strtolower($displayErrors);
        if (error_reporting() === 0 || $displayErrors === "on") {
            return false;
        }
        list($error, $log) = self::mapErrorCode($errno);
        $data = array(
            'level' => $log,
            'code' => $errno,
            'error' => $error,
            'description' => $errstr,
            'file' => $errfile,
            'line' => $errline,
            'path' => $errfile,
            'message' => $error . ' (' . $errno . '): ' . $errstr . ' in [' . $errfile . ', line ' . $errline . ']',
            'context' => $errcontext,
        );

        $logData = print_r($data, 1);
        $logfile = PHPERRLOG;
        //swoole_async_writefile($logfile, $logData, function($filename) use($logfile) {}, FILE_APPEND);
        file_put_contents($logfile, FILE_APPEND);

        return true;
    }


    public static function mapErrorCode($code) {
        $error = $log = null;
        switch ($code) {
            case E_PARSE:
            case E_ERROR:
            case E_CORE_ERROR:
            case E_COMPILE_ERROR:
            case E_USER_ERROR:
                $error = 'Fatal Error';
                $log = LOG_ERR;
                break;
            case E_WARNING:
            case E_USER_WARNING:
            case E_COMPILE_WARNING:
            case E_RECOVERABLE_ERROR:
                $error = 'Warning';
                $log = LOG_WARNING;
                break;
            case E_NOTICE:
            case E_USER_NOTICE:
                $error = 'Notice';
                $log = LOG_NOTICE;
                break;
            case E_STRICT:
                $error = 'Strict';
                $log = LOG_NOTICE;
                break;
            case E_DEPRECATED:
            case E_USER_DEPRECATED:
                $error = 'Deprecated';
                $log = LOG_NOTICE;
                break;
            default :
                break;
        }
        return array($error, $log);
    }



}